# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import re
from datetime import datetime
import asyncio

from storage import add_birthday, get_user_birthdays, delete_birthday

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
BOT_TOKEN = "8090283397:AAHUyO6QAb_4EjACWCP2OuNqhQKAAr_b4-4"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã ---
def validate_date(date_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã."""
    if not re.match(r'^\d{4}-\d{2}-\d{2}$', date_str):
        return False
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command('start', 'help'))
async def send_welcome(message: types.Message):
    help_text = (
        "üéÇ –ë–æ—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–∑–µ–π!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–ò–º—è> <–ì–ì–ì–ì-–ú–ú-–î–î> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "/delete <–ò–º—è> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä: /add –ê–Ω–Ω–∞ 1990-05-15"
    )
    await message.answer(help_text)

@dp.message(Command('add'))
async def add_birthday_handler(message: types.Message):
    text = message.text.strip()
    if not text:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–ò–º—è> <–ì–ì–ì–ì-–ú–ú-–î–î>")
        return

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/add " -> –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
    command = "/add"
    args_text = text[len(command):].strip() if text.startswith(command) else text
    if not args_text:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–ò–º—è> <–ì–ì–ì–ì-–ú–ú-–î–î>")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –Ω–∞ –∏–º—è –∏ –¥–∞—Ç—É
    parts = args_text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–ò–º—è> <–ì–ì–ì–ì-–ú–ú-–î–î>")
        return

    name = parts[0].strip()
    date_str = parts[1].strip()

    if not name or not date_str:
        await message.answer("‚ùå –ò–º—è –∏ –¥–∞—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
        return

    if not validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1990-05-15")
        return

    add_birthday(message.from_user.id, name, date_str)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ‚Äî {date_str}")

@dp.message(Command('delete'))
async def delete_birthday_handler(message: types.Message):
    text = message.text
    if not text:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è: /delete <–ò–º—è>")
        return

    name = text.strip()[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/delete " –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if not name:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è: /delete <–ò–º—è>")
        return

    if delete_birthday(message.from_user.id, name):
        await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {name}")
    else:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {name}")

@dp.message(Command('list'))
async def list_birthdays_handler(message: types.Message):
    birthdays = get_user_birthdays(message.from_user.id)
    if not birthdays:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
        return

    text = "üìÖ –í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
    for name, date_str in birthdays.items():
        text += f" ‚Ä¢ {name}: {date_str}\n"
    await message.answer(text)

async def check_birthdays():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è."""
    from datetime import datetime, timedelta
    import json
    import os

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    if not os.path.exists("birthdays.json"):
        return

    try:
        with open("birthdays.json", 'r', encoding='utf-8') as f:
            all_data = json.load(f)
    except (json.JSONDecodeError, UnicodeDecodeError):
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è birthdays.json")
        return

    # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    today = datetime.today().date()
    target_date = today + timedelta(days=3)  # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
    target_str = target_date.strftime("%m-%d")  # –¢–æ–ª—å–∫–æ –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: "05-15"

    for user_id_str, birthdays in all_data.items():
        reminders = []
        for name, full_date_str in birthdays.items():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
            try:
                birth_date = datetime.strptime(full_date_str, "%Y-%m-%d").date()
                birth_mm_dd = birth_date.strftime("%m-%d")
                if birth_mm_dd == target_str:
                    reminders.append(name)
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã

        if reminders:
            try:
                user_id = int(user_id_str)
                message_text = "üéÇ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ß–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n" + "\n".join(f" ‚Ä¢ {name}" for name in reminders)
                await bot.send_message(chat_id=user_id, text=message_text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()

    scheduler.add_job(check_birthdays, CronTrigger(hour=9, minute=0))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–º —Ü–∏–∫–ª–µ
    async def run_bot():
        try:
            scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await dp.start_polling(bot, skip_updates=True)
        finally:
            scheduler.shutdown()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

    asyncio.run(run_bot())